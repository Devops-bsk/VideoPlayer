# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*


-------------------------------------------------------------------------------------------------------------------------
pipeline script
-------------------------------------------------------------------------------------------------------------------------
pipeline {
    agent any
    
    tools {
        jdk 'jdk'
        nodejs 'node'
        
    }
    environment {
        SCANNER_HOME = tool 'sonar'
    }

    stages {
        stage('cleanWorkspace') {
            steps {
                cleanWs()
            }
        }
        stage('checkout') {
            steps {
               git branch: 'main', credentialsId: 'GitCred', url: 'https://github.com/Devops-bsk/VideoPlayer.git'
            }
        }
        stage('Sonar analysis') {
            steps {
               withSonarQubeEnv('SonarQube-Server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Youtube-CICD -Dsonar.projectKey=Youtube-CICD'''
                }
                   
            }
        }
        stage('Quality Gates') {
            steps {
               waitForQualityGate abortPipeline: false, credentialsId: 'sonarQube-token'
            }
        }
        stage('Install dependencies') {
            steps {
              sh "npm install"
            }
        }
        stage('Trivy scan') {
            steps {
               sh "trivy fs . > trivyfs.txt"
            }
        }
        stage('Docker Build & push') {
            steps {
                script {
                withDockerRegistry(credentialsId: 'DockerToken', toolName: 'docker'){ 
                    sh "docker build -t video-player ."
                    sh "docker tag video-player bskkmg/video-player:v1.0.0"
                    sh "docker push bskkmg/video-player:v1.0.0"
                }
               
                }
            }
        }
        stage('Trivy image scan') {
            steps {
               sh "trivy image bskkmg/video-player:v1.0.0 > trivyimage.txt"
            }
        }
        stage("kubernetes") {
            steps {
                script {
                    dir('Kubernetes') {
                       withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'kubernetes', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                           sh 'kubectl delete --all pods'
                           sh 'kubectl apply -f deployment.yml'
                           sh 'kubectl apply -f service.yml'
                       }
    
                        } 
                    
                }
            }
        }
        
    }
    post {
     always {
        emailext attachLog: true,
            subject: "'${currentBuild.result}'",
            body: "Project: ${env.JOB_NAME}<br/>" +
                "Build Number: ${env.BUILD_NUMBER}<br/>" +
                "URL: ${env.BUILD_URL}<br/>",
            to: 'bsk.kmg@gmail.com',                              
            attachmentsPattern: 'trivyfs.txt,trivyimage.txt'
        }
    }
}
